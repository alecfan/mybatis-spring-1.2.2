<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--  AutoGenerated by lindzh  2015年11月19日 19:01 -->
<mapper namespace="org.mybatis.spring.cache.dao.OrderInfoDao">

	<resultMap id="OrderInfoResultMap" type="org.mybatis.spring.cache.pojo.OrderInfo">
		<id property="id" column="id"/>
		<result property="order_md5" column="order_md5"/>
		<result property="service" column="service"/>
		<result property="user_id" column="user_id"/>
		<result property="admin_id" column="admin_id"/>
		<result property="team_id" column="team_id"/>
		<result property="state" column="state"/>
		<result property="quantity" column="quantity"/>
		<result property="price" column="price"/>
		<result property="partner_price" column="partner_price"/>
		<result property="create_time" column="create_time"/>
		<result property="cancel_time" column="cancel_time"/>
		<result property="pay_time" column="pay_time"/>
		<result property="consume_time" column="consume_time"/>
		<result property="expire_time" column="expire_time"/>
		<result property="clear_time" column="clear_time"/>
		<result property="partner_id" column="partner_id"/>
		<result property="score" column="score"/>
		<result property="scorereturn" column="scorereturn"/>
		<result property="coupon" column="coupon"/>
		<result property="tohome" column="tohome"/>
		<result property="trade_no" column="trade_no"/>
		<result property="buyer_id" column="buyer_id"/>
		<result property="buyer_email" column="buyer_email"/>
		<result property="openid" column="openid"/>
		<result property="wx_transaction_id" column="wx_transaction_id"/>
		<result property="wx_prepay_id" column="wx_prepay_id"/>
		<result property="fbi" column="fbi"/>
		<result property="express_id" column="express_id"/>
		<result property="distribution_id" column="distribution_id"/>
		<result property="community_id" column="community_id"/>
		<result property="delivered_time" column="delivered_time"/>
		<result property="delivery_fee" column="delivery_fee"/>
		<result property="expect_time" column="expect_time"/>
		<result property="udid" column="udid"/>
		<result property="delivering_time" column="delivering_time"/>
		<result property="delivering2_time" column="delivering2_time"/>
		<result property="refundreq_time" column="refundreq_time"/>
		<result property="refunddeny_time" column="refunddeny_time"/>
		<result property="refunding_time" column="refunding_time"/>
		<result property="refunded_time" column="refunded_time"/>
		<result property="arbitrating_time" column="arbitrating_time"/>
		<result property="refund_reason" column="refund_reason"/>
		<result property="clear_id" column="clear_id"/>
		<result property="comment" column="comment"/>
		<result property="autodelivering_time" column="autodelivering_time"/>
		<result property="problem" column="problem"/>
		<result property="replenish" column="replenish"/>
		<result property="hongbao_id" column="hongbao_id"/>
		<result property="hongbao_amount" column="hongbao_amount"/>
		<result property="replenish_order_id" column="replenish_order_id"/>
		<result property="refund_amount" column="refund_amount"/>
		<result property="replenish_responser" column="replenish_responser"/>
		<result property="expect_end_time" column="expect_end_time"/>
		<result property="total_partner_price" column="total_partner_price"/>
		<result property="order_message" column="order_message"/>
		<result property="user_complain_time" column="user_complain_time"/>
		<result property="is_new_order" column="is_new_order"/>
		<result property="groupbuy_id" column="groupbuy_id"/>
		<result property="city_id" column="city_id"/>
		<result property="origin_order_id" column="origin_order_id"/>
		<result property="is_express" column="is_express"/>
		<result property="origin_order_type" column="origin_order_type"/>
		<result property="partner_hongbao_amount" column="partner_hongbao_amount"/>
	</resultMap>
	
	<insert id="addOrderInfo" useGeneratedKeys="true" keyProperty="id" parameterType="org.mybatis.spring.cache.pojo.OrderInfo">
		insert into dc.order(order_md5,service,user_id,admin_id,team_id,state,quantity,price,partner_price,create_time,cancel_time,
		pay_time,consume_time,expire_time,clear_time,partner_id,score,scorereturn,coupon,tohome,trade_no,buyer_id,buyer_email,openid,
		wx_transaction_id,wx_prepay_id,fbi,express_id,distribution_id,community_id,delivered_time,delivery_fee,expect_time,
		udid,delivering_time,delivering2_time,refundreq_time,refunddeny_time,refunding_time,refunded_time,arbitrating_time,
		refund_reason,clear_id,comment,autodelivering_time,problem,replenish,hongbao_id,hongbao_amount,replenish_order_id,
		refund_amount,replenish_responser,expect_end_time,total_partner_price,order_message,user_complain_time, is_new_order,
		 groupbuy_id, city_id,origin_order_id,is_express,origin_order_type,partner_hongbao_amount)
		 values(#{order_md5},#{service},#{user_id},#{admin_id},#{team_id},#{state},#{quantity},#{price},#{partner_price},
		 #{create_time},#{cancel_time},#{pay_time},#{consume_time},#{expire_time},#{clear_time},#{partner_id},#{score},
		 #{scorereturn},#{coupon},#{tohome},#{trade_no},#{buyer_id},#{buyer_email},#{openid},#{wx_transaction_id},
		 #{wx_prepay_id},#{fbi},#{express_id},#{distribution_id},#{community_id},#{delivered_time},#{delivery_fee},
		 #{expect_time},#{udid},#{delivering_time},#{delivering2_time},#{refundreq_time},#{refunddeny_time},#{refunding_time},
		 #{refunded_time},#{arbitrating_time},#{refund_reason},#{clear_id},#{comment},#{autodelivering_time},#{problem},
		 #{replenish},#{hongbao_id},#{hongbao_amount},#{replenish_order_id},#{refund_amount},#{replenish_responser},
		 #{expect_end_time},#{total_partner_price},#{order_message},#{user_complain_time},#{is_new_order},
		 #{groupbuy_id},#{city_id},#{origin_order_id},#{is_express},#{origin_order_type},#{partner_hongbao_amount})

	</insert>
	
	<select id="getById" resultMap="OrderInfoResultMap">
		select * from dc.order where id=#{id}
	</select>
	
	<select id="getByIdAndUserId" resultMap="OrderInfoResultMap">
		select * from dc.order where id=#{id} and user_id=#{user_id} 
	</select>
	
	<select id="getByStateAndExpectEndTime" resultMap="OrderInfoResultMap">
		select * from dc.order where id=#{id} and state=#{state} and expect_end_time&lt;#{expect_end_time} 
	</select>
	
	<select id="getTomorrowOrder" resultMap="OrderInfoResultMap">
		SELECT * FROM dc.order WHERE fbi > 0 AND state = 'pay' 
		AND expect_end_time &gt; #{startTime} AND expect_end_time &lt; #{endTime} AND community_id = #{community_id}
	</select>
	
	<select id="getListByUserIdAndState" resultMap="OrderInfoResultMap">
		select * from dc.order where order.user_id = #{user_id} and  order.state = #{state}
		order by order.id desc 
	</select>
	
	<select id="getListByUserIdAndStateAndTohome" resultMap="OrderInfoResultMap">
		select * from dc.order where order.user_id = #{user_id} and  order.state = #{state} and tohome = #{tohome}
		order by order.id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getListByTime" resultMap="OrderInfoResultMap">
		select * from dc.order
		where partner_id = #{partner_id}

		<if test="time_start !=null">
			and (order.delivered_time &gt;= #{time_start} or order.consume_time &gt;= #{time_start})
		</if>
		<if test="time_end !=null">
			and (order.delivered_time &lt;= #{time_end} or order.consume_time &gt;= #{time_start})
		</if>
	</select>
	
	<select id="getListByPartnerIdAndPayTime" resultMap="OrderInfoResultMap">
		select * from dc.order
		where partner_id = #{partner_id}
		and state = 'pay' 
		<if test="begin_time !=null">
			and (pay_time &gt;= #{begin_time})
		</if>
		<if test="end_time !=null">
			and (pay_time &lt; #{end_time})
		</if>
	</select>
	
	<update id="updateById" parameterType="org.mybatis.spring.cache.pojo.OrderInfo">
		update dc.order set order_md5=#{obj.order_md5},service=#{obj.service},user_id=#{obj.user_id},admin_id=#{obj.admin_id},team_id=#{obj.team_id},
		state=#{obj.state},quantity=#{obj.quantity},price=#{obj.price},partner_price=#{obj.partner_price},create_time=#{obj.create_time},cancel_time=#{obj.cancel_time},
		pay_time=#{obj.pay_time},consume_time=#{obj.consume_time},expire_time=#{obj.expire_time},clear_time=#{obj.clear_time},partner_id=#{obj.partner_id},
		score=#{obj.score},scorereturn=#{obj.scorereturn},coupon=#{obj.coupon},tohome=#{obj.tohome},trade_no=#{obj.trade_no},buyer_id=#{obj.buyer_id},
		buyer_email=#{obj.buyer_email},openid=#{obj.openid},wx_transaction_id=#{obj.wx_transaction_id},wx_prepay_id=#{obj.wx_prepay_id},fbi=#{obj.fbi},
		express_id=#{obj.express_id},distribution_id=#{obj.distribution_id},community_id=#{obj.community_id},delivered_time=#{obj.delivered_time},
		delivery_fee=#{obj.delivery_fee},expect_time=#{obj.expect_time},udid=#{obj.udid},delivering_time=#{obj.delivering_time},delivering2_time=#{obj.delivering2_time},
		refundreq_time=#{obj.refundreq_time},refunddeny_time=#{obj.refunddeny_time},refunding_time=#{obj.refunding_time},refunded_time=#{obj.refunded_time},
		arbitrating_time=#{obj.arbitrating_time},refund_reason=#{obj.refund_reason},clear_id=#{obj.clear_id},comment=#{obj.comment},
		autodelivering_time=#{obj.autodelivering_time},problem=#{obj.problem},replenish=#{obj.replenish},hongbao_id=#{obj.hongbao_id},
		hongbao_amount=#{obj.hongbao_amount},replenish_order_id=#{obj.replenish_order_id},refund_amount=#{obj.refund_amount},
		replenish_responser=#{obj.replenish_responser},expect_end_time=#{obj.expect_end_time},order_message=#{obj.order_message},user_complain_time=#{obj.user_complain_time},
		is_new_order=#{obj.is_new_order},origin_order_id=#{obj.origin_order_id}
		where id=#{obj.id}
	</update>
	
	<update id="updateByIdAndState" parameterType="org.mybatis.spring.cache.pojo.OrderInfo">
		update dc.order set order_md5=#{obj.order_md5},service=#{obj.service},user_id=#{obj.user_id},admin_id=#{obj.admin_id},team_id=#{obj.team_id},
		state=#{obj.state},quantity=#{obj.quantity},price=#{obj.price},partner_price=#{obj.partner_price},create_time=#{obj.create_time},cancel_time=#{obj.cancel_time},
		pay_time=#{obj.pay_time},consume_time=#{obj.consume_time},expire_time=#{obj.expire_time},clear_time=#{obj.clear_time},partner_id=#{obj.partner_id},
		score=#{obj.score},scorereturn=#{obj.scorereturn},coupon=#{obj.coupon},tohome=#{obj.tohome},trade_no=#{obj.trade_no},buyer_id=#{obj.buyer_id},
		buyer_email=#{obj.buyer_email},openid=#{obj.openid},wx_transaction_id=#{obj.wx_transaction_id},wx_prepay_id=#{obj.wx_prepay_id},fbi=#{obj.fbi},
		express_id=#{obj.express_id},distribution_id=#{obj.distribution_id},community_id=#{obj.community_id},delivered_time=#{obj.delivered_time},
		delivery_fee=#{obj.delivery_fee},expect_time=#{obj.expect_time},udid=#{obj.udid},delivering_time=#{obj.delivering_time},delivering2_time=#{obj.delivering2_time},
		refundreq_time=#{obj.refundreq_time},refunddeny_time=#{obj.refunddeny_time},refunding_time=#{obj.refunding_time},refunded_time=#{obj.refunded_time},
		arbitrating_time=#{obj.arbitrating_time},refund_reason=#{obj.refund_reason},clear_id=#{obj.clear_id},comment=#{obj.comment},
		autodelivering_time=#{obj.autodelivering_time},problem=#{obj.problem},replenish=#{obj.replenish},hongbao_id=#{obj.hongbao_id},
		hongbao_amount=#{obj.hongbao_amount},replenish_order_id=#{obj.replenish_order_id},refund_amount=#{obj.refund_amount},
		replenish_responser=#{obj.replenish_responser},expect_end_time=#{obj.expect_end_time},order_message=#{obj.order_message},user_complain_time=#{obj.user_complain_time},
		is_new_order=#{obj.is_new_order},origin_order_id=#{obj.origin_order_id}
		where id=#{obj.id} and state=#{state}
	</update>
	
	<update id="updateByIdIsUnpayOrCancel" parameterType="org.mybatis.spring.cache.pojo.OrderInfo">
		update dc.order set order_md5=#{obj.order_md5},service=#{obj.service},user_id=#{obj.user_id},admin_id=#{obj.admin_id},team_id=#{obj.team_id},
		state=#{obj.state},quantity=#{obj.quantity},price=#{obj.price},partner_price=#{obj.partner_price},create_time=#{obj.create_time},cancel_time=#{obj.cancel_time},
		pay_time=#{obj.pay_time},consume_time=#{obj.consume_time},expire_time=#{obj.expire_time},clear_time=#{obj.clear_time},partner_id=#{obj.partner_id},
		score=#{obj.score},scorereturn=#{obj.scorereturn},coupon=#{obj.coupon},tohome=#{obj.tohome},trade_no=#{obj.trade_no},buyer_id=#{obj.buyer_id},
		buyer_email=#{obj.buyer_email},openid=#{obj.openid},wx_transaction_id=#{obj.wx_transaction_id},wx_prepay_id=#{obj.wx_prepay_id},fbi=#{obj.fbi},
		express_id=#{obj.express_id},distribution_id=#{obj.distribution_id},community_id=#{obj.community_id},delivered_time=#{obj.delivered_time},
		delivery_fee=#{obj.delivery_fee},expect_time=#{obj.expect_time},udid=#{obj.udid},delivering_time=#{obj.delivering_time},delivering2_time=#{obj.delivering2_time},
		refundreq_time=#{obj.refundreq_time},refunddeny_time=#{obj.refunddeny_time},refunding_time=#{obj.refunding_time},refunded_time=#{obj.refunded_time},
		arbitrating_time=#{obj.arbitrating_time},refund_reason=#{obj.refund_reason},clear_id=#{obj.clear_id},comment=#{obj.comment},
		autodelivering_time=#{obj.autodelivering_time},problem=#{obj.problem},replenish=#{obj.replenish},hongbao_id=#{obj.hongbao_id},
		hongbao_amount=#{obj.hongbao_amount},replenish_order_id=#{obj.replenish_order_id},refund_amount=#{obj.refund_amount},
		replenish_responser=#{obj.replenish_responser},expect_end_time=#{obj.expect_end_time},order_message=#{obj.order_message},user_complain_time=#{obj.user_complain_time},
		is_new_order=#{obj.is_new_order},origin_order_id=#{obj.origin_order_id}
		where id=#{obj.id} and (state ='unpay' or state = 'cancel')
	</update>
	
	<update id="updateClearIdById" >
		update dc.order set clear_id=#{clear_id}
		where id=#{id}
	</update>
	
	<update id="updateStateAndArbitretingTimeById" >
		update dc.order set state=#{state},arbitrating_time=#{arbitrating_time}
		where id=#{id}
	</update>
	
	<update id="updateStateById" >
		update dc.order set state=#{state}
		where id=#{id}
	</update>
	
	<update id="updateUserComplainTimeById" >
		update dc.order set user_complain_time=#{user_complain_time}
		where id=#{id}
	</update>
	
	<update id="updateStateAndCancelTimeById" >
		update dc.order set state=#{state},cancel_time=#{cancel_time}
		where id=#{id}
	</update>
	
	<update id="updateStateAndDeliveringTimeById">
		update dc.order set state=#{state},delivering_time=#{delivering_time}
		where id=#{id}
	</update>
	
	<update id="updateDelivering2TimeById">
		update dc.order set delivering2_time=#{delivering2_time}
		where id=#{id}
	</update>
	
	<update id="updateStateAndDeliveredTimeById">
		update dc.order set state=#{state},delivered_time=#{delivered_time}
		where id=#{id}
		<if test="oldStates!=null">
		and 
		<foreach collection="oldStates" open="(" close=")" separator="or" item="ostate">
			state=#{ostate}
		</foreach>
		</if>
	</update>
	
	<update id="updateStateAndRefundreqTimeById">
		update dc.order set state=#{state},refundreq_time=#{refundreq_time}
		where id=#{id} and state=#{ostate}
	</update>
	
	<update id="updateStateAndRefundingTimeAndReasonAndCouponById">
		update dc.order set state=#{state},refunding_time=#{refunding_time},refund_reason=#{refund_reason},coupon=#{coupon},refund_amount=#{refund_amount}
		where id=#{id} and state=#{ostate}
	</update>
	
	<update id="updateServiceAndPrepayIdById">
		update dc.order set service=#{service},wx_prepay_id=#{wx_prepay_id}
		where id=#{id}
	</update>
	
	<delete id="deleteById">
		delete from dc.order where id=#{id}
	</delete>
	
	<select id="getByOrdermd5" resultMap="OrderInfoResultMap">
		select * from dc.order where order_md5=#{order_md5}
	</select>
	
	<select id="getByIdNotCancel" resultMap="OrderInfoResultMap">
		select * from dc.order where id=#{id} and state != 'cancel'
	</select>
	
	<select id="getCountByBuyerIdNotCancel" resultType="long">
		select count(*) from dc.order where buyer_id=#{buyer_id} and state != 'cancel'
	</select>
	
	<select id="getByBuyerIdNotCancel" resultMap="OrderInfoResultMap">
		select * from dc.order where buyer_id=#{buyer_id} and state != 'cancel'
	</select>
	
	<select id="getCountByOpenIdNotCancel" resultType="long">
		select count(*) from dc.order where openid=#{openid} and state != 'cancel'
	</select>
	
	<select id="getByOpenIdNotCancel" resultMap="OrderInfoResultMap">
		select * from dc.order where openid=#{openid} and state != 'cancel'
	</select>

	<select id="getListByUserId" resultMap="OrderInfoResultMap">
		select * from dc.order where
		user_id=#{user_id}
		order by id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getCountByUserId" resultType="long">
		select count(*) from dc.order where 
		user_id=#{user_id}
	</select>
	
	<select id="getCountByUserIdAndToHomeAndStateNotFbi" resultType="long">
		select count(*) from dc.order where 
		user_id=#{user_id} and fbi = 0 and tohome = #{tohome} and state = #{state}
	</select>
	
	<select id="getCountByUserIdAndNotUnpayOrCancel" resultType="long">
		select count(*) from dc.order where 
		user_id=#{user_id} and state != 'unpay' and state != 'cancel'
	</select>
	
	<select id="getCountByUserIdAndToHomeNotFinished" resultType="long">
		select count(*) from dc.order where 
		user_id=#{user_id} and tohome = #{tohome} and (state = 'delivering' or state = 'delivering2')
	</select>
	
	
	<select id="getListByPartnerIdAndCoupon" resultMap="OrderInfoResultMap">
		select * from dc.order where
		partner_id=#{partner_id} and coupon=#{coupon}
		order by id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getCountByUserIdAndUdidNotCancel" resultType="long">
		select count(*) from dc.order where
		(user_id=#{user_id} or udid=#{udid}) and state != 'cancel'
	</select>
	
	<select id="getCountByUserIdAndPartnerIdNotCancel" resultType="long">
		select count(*) from dc.order where
		user_id=#{user_id} and partner_id=#{partner_id} and state != 'cancel'
	</select>
	
	<select id="getCountByPartnerIdAndCoupon" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id} and coupon=#{coupon}
	</select>
	
	<select id="getCountByUserIdAndState" resultType="long">
		select count(*) from dc.order where 
		user_id=#{user_id} and state=#{state}
	</select>
	
	<select id="getByPartnerAndCoupon" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id} and coupon=#{coupon}
	</select>
		
	<select id="getByBuyerIdAndCreteTimeNotCancel" resultMap="OrderInfoResultMap">
		select * from dc.order where buyer_id=#{buyer_id} and create_time &gt; #{create_time} and state != 'cancel'
	</select>
	
	<select id="getCountByPartnerAndState" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id}
		<if test="state!=null">
		and state=#{state}
		</if>
	</select>
	
	<select id="getCountByPartnerAndStateAndClearId" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id}
		and clear_id = #{clear_id}
		<if test="state!=null">
		and state=#{state}
		</if>
	</select>
	
	<select id="getListByPartnerAndState" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="state!=null">
		and state=#{state}
		</if>
		order by id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getListByPartnerAndStateAndClearId" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		and clear_id = #{clear_id}
		<if test="state!=null">
		and state=#{state}
		</if>
		order by id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getCountByPartnerAndTohomeAndStateAndFbi" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		<if test="state!=null">
		and state=#{state}
		</if>
		and fbi=#{fbi}
	</select>
	
	<select id="getListByPartnerAndTohomeAndStateAndFbi" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		<if test="state!=null">
		and state=#{state}
		</if>
		and fbi=#{fbi} order by id desc limit #{limit} offset #{offset}
	</select>
	
	<select id="getByTime" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="delivered_time_begin!=-1">
		and delivered_time &gt;= #{delivered_time_begin}
		</if>
		<if test="delivered_time_end!=-1">
		and delivered_time &lt; #{delivered_time_end}
		</if>
	</select>
	
	<select id="getListByPartnerAndTohomeAndFbiAndStates" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		and fbi=#{fbi} 
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
		<choose>
			<when test="orderBy=='consume_time'">
				order by consume_time desc limit #{limit} offset #{offset}
			</when>
			<when test="orderBy=='delivered_time'">
				order by delivered_time desc limit #{limit} offset #{offset}
			</when>
			<when test="orderBy=='refundreq_time'">
				order by refundreq_time desc limit #{limit} offset #{offset}
			</when>
			<when test="orderBy=='refunding_time'">
				order by refunding_time desc limit #{limit} offset #{offset}
			</when>
			<when test="orderBy=='refunded_time'">
				order by refunded_time desc limit #{limit} offset #{offset}
			</when>
			<when test="orderBy=='refundeny_time'">
				order by refunddeny_time desc limit #{limit} offset #{offset}
			</when>
			<otherwise>
				order by id desc limit #{limit} offset #{offset}
			</otherwise>
		</choose>
	</select>
	
	<select id="getNoDeliverdListByPartnerAndTohomeAndFbiAndStates" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		and fbi=#{fbi} 
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
		and delivering2_time = 0
		order by expect_time limit #{limit} offset #{offset}
	</select>

	<select id="getDeliveredListByPartnerAndTohomeAndFbiAndStates" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		and fbi=#{fbi} 
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
		and (delivering2_time &gt; 0)
		order by expect_time limit #{limit} offset #{offset}
<!-- 		delivering2_time desc
 -->	</select>
	
	<select id="getDeliveredListByTohomeAndFbiAndStates" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		<if test="tohome!=null">
			tohome=#{tohome}
		</if>
		and fbi=#{fbi} 
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
		and (delivering2_time &gt; 0)
	</select>
	
	<select id="getCountByPartnerIdAndStates" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id}
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
	</select>
	
	<select id="getDistinctUserCountByPartnerIdAndStates" resultType="long">
		select count(distinct(user_id)) from dc.order where 
		partner_id=#{partner_id}
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
	</select>
	
	<select id="getDeliveredCountByPartnerAndTohomeAndFbiAndStates" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id}
		<if test="tohome!=null">
		and tohome=#{tohome}
		</if>
		and fbi=#{fbi} 
		<if test="states!=null">
		and 
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		</if>
		and delivering2_time &gt; 0
	</select>
	
	
	<select id="getListByDistributionAndExpecttimeGroupByCommunityId" resultMap="OrderInfoResultMap">
		select * from dc.order where distribution_id=#{distribution_id} and expect_time=#{expect_time} group by community_id 
	</select>
	
	<select id="getExpectTimeListByDistributionid" resultType="long">
		select distinct expect_time from dc.order where distribution_id=#{distribution_id}
	</select>
	
	<select id="getCountByDistributionidAndExpectTime" resultType="long">
		select count(*) from dc.order where distribution_id=#{distribution_id} and expect_time=#{expect_time}
	</select>
	
	<select id="getByGroupBuyIdAndUserId" resultMap="OrderInfoResultMap">
		select * from dc.order where groupbuy_id=#{groupbuy_id} and user_id=#{user_id} and origin_order_type = 1
	</select>
	
	<select id="getCommunityIdByDistributionidAndExpectTime" resultType="long">
		select distinct community_id from dc.order where distribution_id=#{distribution_id} and expect_time=#{expect_time}
	</select>
	
	<select id="getByDistributionIdAndExpectTimeAndStateAndCommunityId" resultMap="OrderInfoResultMap">
		select * from dc.order where distribution_id=#{distribution_id} and expect_time=#{expect_time} and community_id=#{community_id} and state=#{state}
	</select>
	
	<select id="getFbiListByDistributionIdAndExpectEndTimeAndStateAndPayTime" resultMap="OrderInfoResultMap">
		select * from dc.order where
		 distribution_id=#{distribution_id} 
		  and expect_end_time &lt; #{expect_end_time} 
		  and state=#{state} and fbi =1
		  and pay_time &lt; #{pay_time}
	</select>
	
	<select id="getSumIncomeByPartnerId" resultType="double">
		select IFNULL(sum(delivery_fee + total_partner_price),0) 
		from dc.order 
		where partner_id=#{partner_id} 
		and state in (&apos;consume&apos;,&apos;delivered&apos;,&apos;userappraised&apos;)
		<if test="startTime!=null">
		and (consume_time&gt;=#{startTime} or delivered_time&gt;=#{startTime})
		</if>
		<if test="endTime!=null">
		and (consume_time&lt;#{startTime} or delivered_time&lt;#{startTime})
		</if>
	</select>
	
	<select id="getOrderToCancel">
		select * from dc.order
		where state = "unpay" 
		<if test="create_time != null">
		and create_time &lt; #{create_time}
		</if>
	</select>

	<select id="getListByCreateTimeAndState" resultMap="OrderInfoResultMap">
		select * from dc.order
		where 
		<if  test="state != null">
			state = #{state}
		</if>
		and create_time &lt; #{create_time}
	</select>
	
	<select id="getListByTohomeAndFbiAndStateAndPaytime" resultMap="OrderInfoResultMap">
		select * from dc.order where
		<if  test="state != null">
			state = #{state} and
		</if> 
		<if  test="tohome != null">
			tohome = #{tohome} and
		</if>
		fbi=#{fbi} and pay_time&gt;=#{pay_starttime} and pay_time&lt;=#{pay_endtime}
	</select>
	
	<select id="getListByTohomeAndFbiAndStateAndExpecttime" resultMap="OrderInfoResultMap">
		select * from dc.order where
		<if  test="state != null">
			state = #{state} and
		</if> 
		<if  test="tohome != null">
			tohome = #{tohome} and
		</if>
		fbi=#{fbi} and expect_time&gt;=#{expect_starttime} and expect_time&lt;#{expect_endtime} and delivering2_time = 0
	</select>	

	<select id="getListByStateAndFbiAndDelivering2time" resultMap="OrderInfoResultMap">
		select * from dc.order where
		<if  test="state != null">
			state = #{state} and
		</if>
		fbi=#{fbi} and delivering2_time&gt;=#{delivering2_starttime} and delivering2_time&lt;=#{delivering2_endtime} limit #{limit} offset #{offset}
	</select>	
	
	<select id="getCountByPartnerAndFbi" resultType="long">
		select count(*) from dc.order
		where 
		partner_id = #{partner_id}
		and 
		fbi = #{fbi}
	</select>			
	
	<select id="getDeliveredListByTohomeAndFbiAndStatesAndTime" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		tohome=#{tohome} and fbi=#{fbi} and delivering2_time &lt; #{time}
		and expect_time &lt; #{time}
		and
		<foreach collection="states" open="(" close=")" item="state" separator="or">
		state=#{state}
		</foreach>
		and delivering2_time &gt; 0
	</select>
	
	<update id="updateStateAndDistributeIdAndDeliveringByIdAndState">
		update dc.order set state=#{newState},distribution_id=#{distribution_id},delivering_time=#{delivering_time}
		where id=#{id} and state=#{oldState}
	</update>
	
	<select id="getListByUserAndStateIsFbi" resultMap="OrderInfoResultMap">
		select * from dc.order
		where user_id=#{user_id} and state = #{state} and fbi=1
	</select>
	
	<select id="getListByOrderIdAndState" resultMap="OrderInfoResultMap">
		select * from dc.order
		where id &gt; #{id} and state = #{state} and fbi=1 and expect_time &gt; #{expect_time} and expect_end_time &lt; #{expect_end_time} and partner_id = #{partner_id}
	</select>
	
	<select id="getSplitOrderId" resultMap="OrderInfoResultMap">
		select * from dc.order where 
		expect_end_time &gt; #{start} 
		and expect_end_time &lt; #{end} 
		and fbi = 1 
		and state = 'pay' 
		and partner_id = #{partner_id} 
		and id not in ( 
			select distinct order_id from dc.split_order 
				where expect_end_time &gt; #{start}
				and expect_end_time &lt; #{end}
				and partner_id = #{partner_id} )
	</select>
	
	<select id="getCountByPartnerIdAndCreateTimeHasPay" resultType="long">
		select count(*) from dc.order where 
		partner_id=#{partner_id} and create_time&gt;#{create_time} and pay_time > 0
	</select>
</mapper>