package org.mybatis.spring.cache.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.mybatis.spring.cache.CacheVersion;
import org.mybatis.spring.cache.OperateType;
import org.mybatis.spring.cache.RedisCache;
import org.mybatis.spring.cache.pojo.UserInfo;

import com.linda.common.mybatis.generator.annotation.Table;

/**
 * @author AutoGenerated by lindzh
 * 2015年11月16日 18:46
 */
@CacheVersion("v1.0")
@Table(name="user")
public interface UserInfoDao {

	@RedisCache(operate=OperateType.INSERT,refKey="id",refPrefix="user_")
	public int addUserInfo(UserInfo obj);

	/**
	 * ref select sql
	 * @param id
	 * @return
	 */
	@RedisCache(operate=OperateType.SELECT,key="id",prefix="user_",refKey="id",refPrefix="user_")
	public UserInfo getById(@Param("id")long id);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateById(@Param("obj")UserInfo obj);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateTokenAndExpireById(@Param("id")long id, @Param("token")String token, @Param("expire_time")int expireTime);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateCommunityIdAndCityIdById(@Param("id")long id, @Param("community_id")long communityId, @Param("city_id")long cityId);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateTokenAndExpireAndModelById(@Param("id")long id, @Param("token")String token, @Param("expire_time")int expireTime, @Param("model")String model);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updatePassById(@Param("id")long id,@Param("password")String password);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateMaxreadmessageidById(@Param("id")long id, @Param("maxreadmessageid")int maxreadmessageid);
	
	@RedisCache(operate=OperateType.DELETE,refKey="id",refPrefix="user_")
	public int deleteById(@Param("id")long id);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateScoreById(@Param("id")long id,@Param("score")double score);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateScoreAndHasPayById(@Param("id")long id,@Param("score")double score,@Param("has_pay")int hasPay);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateHaspayById(@Param("id")long id,@Param("has_pay")int hasPay);
	
	@RedisCache(operate=OperateType.SELECT,key="mobile",prefix="user_getByMobile_",refPrefix="user_",refKey="id")
	public UserInfo getByMobile(@Param("mobile")String mobile);
	
	@RedisCache(operate=OperateType.SELECT,key="token",prefix="user_getByToken_",refPrefix="user_",refKey="id")
	public UserInfo getByToken(@Param("token")String token);
	
	@RedisCache(operate=OperateType.SELECT,key="openid",prefix="user_getByOpenid_",refPrefix="user_",refKey="id")
	public UserInfo getByOpenid(@Param("openid")String openid);

	@RedisCache(operate=OperateType.SELECT,key="community_id",prefix="user_getListByCommunityAndPartAndBuildingAndUnit_",refPrefix="user_",refKey="id")
	public List<UserInfo> getListByCommunityAndPartAndBuildingAndUnit(@Param("community_id")long community_id,@Param("part")String part,@Param("building")int building,@Param("unit")int unit,@Param("room")int room,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="community_id",prefix="user_getCountByCommunityAndPartAndBuildingAndUnit_",refPrefix="user_",refKey="id")
	public long getCountByCommunityAndPartAndBuildingAndUnit(@Param("community_id")long community_id,@Param("part")String part,@Param("building")int building,@Param("unit")int unit,@Param("room")int room);

	@RedisCache(operate=OperateType.SELECT,key="unionid",prefix="user_getbyUnionid_",refKey="id",refPrefix="user_")
	public UserInfo getbyUnionid(@Param("unionid")String unionid);

	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="user_")
	public int updateRiskScoreById(@Param("id")long id,@Param("riskScore")int score);
}
