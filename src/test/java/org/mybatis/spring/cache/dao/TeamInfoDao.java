package org.mybatis.spring.cache.dao;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.mybatis.spring.cache.CacheVersion;
import org.mybatis.spring.cache.OperateType;
import org.mybatis.spring.cache.RedisCache;
import org.mybatis.spring.cache.RedisCacheService;
import org.mybatis.spring.cache.pojo.TeamInfo;

import com.linda.common.mybatis.generator.annotation.Table;

/**
 * @author AutoGenerated by lindzh
 * 2015年11月17日 10:55
 */
@CacheVersion("v1.0")
@Table(name="team")
public interface TeamInfoDao {

	@RedisCache(operate=OperateType.INSERT,refKey="id",refPrefix="team_")
	public int addTeamInfo(TeamInfo obj);

	@RedisCache(operate=OperateType.SELECT,key="id",prefix="team_",refKey="id",refPrefix="team_")
	public TeamInfo getById(@Param("id")long id);
	
	@RedisCache(operate=OperateType.MULTISELECT,key="id",prefix="team_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getByIds(List<Long> ids);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOneByPartnerIdAndBaokuan_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getOneByPartnerIdAndBaokuan(@Param("partner_id")long partnerId, @Param("expire_time")int expireTime);
	
	@RedisCache(operate=OperateType.MULTISELECT,key="partner_id",prefix="team_getOneByPartnerIdAndBaokuan_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerIdAndBaokuan(List<Map<String,Object>> partnerAndExpireTimes);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateById(@Param("obj")TeamInfo obj);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int incrNumby(@Param("id")long id,@Param("count")int incr,@Param("quantity")int quantity);
	
	@RedisCache(operate=OperateType.DELETE,refKey="id",refPrefix="team_")
	public int deleteById(@Param("id")long id);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOnSaleListByPartnerIdAndExpireTimeAndGroupId_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getOnSaleListByPartnerIdAndExpireTimeAndGroupId(
			@Param("partner_id")long partnerId,@Param("expire_time")int expireTime, @Param("group_id")Integer groupId,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOnSaleCountByPartnerIdAndExpireTimeAndGroupId_",refKey="id",refPrefix="team_")
	public long getOnSaleCountByPartnerIdAndExpireTimeAndGroupId(
			@Param("partner_id")long partnerId,@Param("expire_time")int expireTime, @Param("group_id")Integer groupId);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getByPartnerIdAndExirpeTimeNotActivityGoods_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getByPartnerIdAndExirpeTimeNotActivityGoods(@Param("partner_id")long partnerId,@Param("expire_time")int expireTime);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListSoldOutByPartnerIdNotActivityGoods_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListSoldOutByPartnerIdNotActivityGoods(@Param("partner_id")long partnerId,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOffShelfListByPartnerIdAndExirpeTimeAndGroupId_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getOffShelfListByPartnerIdAndExirpeTimeAndGroupId(
			@Param("partner_id")long partnerId,@Param("expire_time")int expireTime, @Param("group_id")Integer groupId, @Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOffShelfCountByPartnerIdAndExpireTimeAndGroupId_",refKey="id",refPrefix="team_",ttl=RedisCacheService.EXPIRE_HALF_HOUR)
	public long getOffShelfCountByPartnerIdAndExpireTimeAndGroupId(
			@Param("partner_id")long partnerId,@Param("expire_time")int expireTime, @Param("group_id")Integer groupId);
	
	//hly
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerIdNotActivityGoods_",refKey="id",refPrefix="team_",ttl=RedisCacheService.EXPIRE_HALF_HOUR)
	public List<TeamInfo> getListByPartnerIdNotActivityGoods(@Param("partner_id")long partnerId,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByFbiAndTypeAndNotGrpupAndBeginExpire_",refKey="id",refPrefix="team_",ttl=RedisCacheService.EXPIRE_HALF_HOUR)
	public List<TeamInfo> getListByFbiAndTypeAndNotGrpupAndBeginExpire(@Param("partner_id")long partnerId, @Param("fbi")int fbi,@Param("type")int type,@Param("group_id")long group_id,@Param("begin_time")int begin_time);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getFbiListByGroupIdAndBeginExpire_",refKey="id",refPrefix="team_",ttl=RedisCacheService.EXPIRE_HALF_HOUR)
	public List<TeamInfo> getFbiListByGroupIdAndBeginExpire(@Param("partner_id")long partnerId, @Param("group_id")long group_id, @Param("begin_time")int begin_time);
	
	public long getFbiListCountByGroupIdAndBeginExpire(@Param("partner_id")long partnerId, @Param("group_id")long group_id, @Param("begin_time")int begin_time ,@Param("expire_time")int expireTime);
	
	@RedisCache(operate=OperateType.MULTISELECT,key="partner_id",prefix="team_getFbiListByGroupIdAndBeginExpire_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getFbiListByGroupIdsAndBeginExpire(List<Map<String,Object>> params);
	
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getAllSellingFbiTeams_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getAllSellingFbiTeams(@Param("partner_id")long partnerId, @Param("expire_time")int expire_time);
	
	public long getCountByFbiAndTypeAndNotGrpupAndBeginExpire(@Param("fbi")int fbi,@Param("type")int type,@Param("group_id")long group_id,
			@Param("begin_time")int begin_time,@Param("expire_time")int expire_time);
	
	public List<TeamInfo> getListByFbiAndTypeAndBeginStartEnd(@Param("city_id")long cityId, @Param("fbi")int fbi,@Param("type")int type,
			@Param("bg_start_time")int begin_time,@Param("bg_end_time")int bg_end_time,@Param("limit")int limit,@Param("offset") int offset);
	
	public long getCountByFbiAndTypeAndBeginStartEnd(@Param("fbi")int fbi,@Param("type")int type,
			@Param("bg_start_time")int begin_time,@Param("bg_end_time")int bg_end_time);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getOneByPartnerIdAndType_",refKey="id",refPrefix="team_")
	public TeamInfo getOneByPartnerIdAndType(@Param("type")int type,@Param("partner_id")long partner_id);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getByPartnerIdAndEffectiveTeam_",refKey="id",refPrefix="team_")
	public TeamInfo getByPartnerIdAndEffectiveTeam(@Param("partner_id")long partner_id,@Param("expire_time")int expire_time);
	
	/**
	 * 批量查询
	 * map<partnerId,id>
	 * map<type,type>
	 * @param partnerAndTypeMap
	 * @return
	 */
	@RedisCache(operate=OperateType.MULTISELECT,key="partner_id",prefix="team_getOneByPartnerIdAndType_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListOneByPartnerAndType(List<Map<String,Object>> partnerAndTypeMap);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getCountByPartnerIdAndType_",refKey="id",refPrefix="team_")
	public long getCountByPartnerIdAndType(@Param("type")int type,@Param("partner_id")long partner_id);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerId_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerId(@Param("partner_id")long partner_id,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerIdNotNewUserOnly_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerIdNotNewUserOnly(@Param("partner_id")long partner_id,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getCountByPartnerId_",refKey="id",refPrefix="team_")
	public int getCountByPartnerId(@Param("partner_id")long partner_id);

	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerAndTypeAndExpire_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerAndTypeAndExpire(@Param("partner_id")long partner_id,@Param("type")int type,@Param("expire_time")int expire_time);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerAndTypeAndExpireLimitOffset_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerAndTypeAndExpireLimitOffset(@Param("partner_id")long partner_id,@Param("type")int type,@Param("expire_time")int expire_time,@Param("limit")int limit,@Param("offset") int offset);
	
	@RedisCache(operate=OperateType.SELECT,key="taggroup",prefix="team_getListByTagGroup_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByTagGroup(@Param("taggroup")int taggroup);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getListByPartnerIdAndExpireTimeAndIsBaokuan_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getListByPartnerIdAndExpireTimeAndIsBaokuan(@Param("partner_id")long partnerId, @Param("expire_time")int expireTime);
	
	@RedisCache(operate=OperateType.SELECT,key="taggroup",prefix="team_getCountByTagGroup_",refKey="id",refPrefix="team_")
	public long getCountByTagGroup(@Param("taggroup")int taggroup);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getFbiPresaleTeamsByCityId_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getFbiPresaleTeamsByCityId(@Param("partner_id")long partnerId, @Param("city_id")long cityId, @Param("begin_time")int beginTime);

	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateMaxnumberAndCleanTodaySaleById(@Param("id")long id, @Param("maxNumber")int maxNumber);

	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateOnSaleById(@Param("onsale")int onsale, @Param("auto_unshelve")int auto_unshelve, @Param("id")long id);
	

	/**
	 * 更新活动相关的商品信息
	 * @param id
	 * @param activityId
	 * @param teamPrice
	 * @param fixedAmount
	 * @param tag
	 * @param taguser
	 * @param taggroup
	 * @return
	 */
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateActivityById(@Param("id")long id, @Param("activity_id")long activityId, @Param("team_price")double teamPrice,
			@Param("fixed_amount")int fixedAmount,@Param("tag")int tag, @Param("taguser")int taguser, @Param("taggroup")int taggroup, @Param("new_user_only")int newUserOnly);
	
	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateActivityIdAndTeamPriceAndFixedAmountById(@Param("id")long id, @Param("activity_id")long activityId, @Param("team_price")double teamPrice,
			@Param("fixed_amount")int fixedAmount, @Param("tag")int tag, @Param("count")int count);

	public List<TeamInfo> getListTodaySaleNotEmpty(@Param("limit")int limit, @Param("offset")int offset);

	@RedisCache(operate=OperateType.UPDATE,refKey="id",refPrefix="team_")
	public int updateTodaySaleIsEmpty(@Param("today_sale")int today_sale, @Param("id")long id);
	
	@RedisCache(operate=OperateType.SELECT,key="partner_id",prefix="team_getByPartnerIdAndCode_",refKey="id",refPrefix="team_")
	public List<TeamInfo> getByPartnerIdAndCode(@Param("partner_id")long partnerId, @Param("code")String code);

}
